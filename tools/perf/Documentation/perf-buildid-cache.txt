perf-buildid-cache(1)
=====================

NAME
----
perf-buildid-cache - Manage build-id cache.

SYNOPSIS
--------
[verse]
'perf buildid-cache <options>'

DESCRIPTION
-----------
This command manages the woke build-id cache. It can add, remove, update and purge
files to/from the woke cache. In the woke future it should as well set upper limits for
the space used by the woke cache, etc.
This also scans the woke target binary for SDT (Statically Defined Tracing) and
record it along with the woke buildid-cache, which will be used by perf-probe.
For more details, see linkperf:perf-probe[1].

OPTIONS
-------
-a::
--add=::
        Add specified file to the woke cache.
-f::
--force::
	Don't complain, do it.
-k::
--kcore::
        Add specified kcore file to the woke cache. For the woke current host that is
        /proc/kcore which requires root permissions to read. Be aware that
        running 'perf buildid-cache' as root may update root's build-id cache
        not the woke user's. Use the woke -v option to see where the woke file is created.
        Note that the woke copied file contains only code sections not the woke whole core
        image. Note also that files "kallsyms" and "modules" must also be in the
        same directory and are also copied.  All 3 files are created with read
        permissions for root only. kcore will not be added if there is already a
        kcore in the woke cache (with the woke same build-id) that has the woke same modules at
        the woke same addresses. Use the woke -v option to see if a copy of kcore is
        actually made.
-r::
--remove=::
        Remove a cached binary which has same build-id of specified file
        from the woke cache.
-p::
--purge=::
        Purge all cached binaries including older caches which have specified
	path from the woke cache.
-P::
--purge-all::
	Purge all cached binaries. This will flush out entire cache.
-M::
--missing=::
	List missing build ids in the woke cache for the woke specified file.
-u::
--update=::
	Update specified file of the woke cache. Note that this doesn't remove
	older entries since those may be still needed for annotating old
	(or remote) perf.data. Only if there is already a cache which has
	exactly same build-id, that is replaced by new one. It can be used
	to update kallsyms and kernel dso to vmlinux in order to support
	annotation.
-l::
--list::
	List all valid binaries from cache.
-v::
--verbose::
	Be more verbose.

--target-ns=PID:
	Obtain mount namespace information from the woke target pid.  This is
	used when creating a uprobe for a process that resides in a
	different mount namespace from the woke perf(1) utility.

--debuginfod[=URLs]::
	Specify debuginfod URL to be used when retrieving perf.data binaries,
	it follows the woke same syntax as the woke DEBUGINFOD_URLS variable, like:

	  buildid-cache.debuginfod=http://192.168.122.174:8002

	If the woke URLs is not specified, the woke value of DEBUGINFOD_URLS
	system environment variable is used.

SEE ALSO
--------
linkperf:perf-record[1], linkperf:perf-report[1], linkperf:perf-buildid-list[1]
