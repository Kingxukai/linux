[
    {
        "BriefDescription": "Counts the woke total number of branch instructions retired for all branch types.",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0xc4",
        "EventName": "BR_INST_RETIRED.ALL_BRANCHES",
        "PublicDescription": "Counts the woke total number of instructions in which the woke instruction pointer (IP) of the woke processor is resteered due to a branch instruction and the woke branch instruction successfully retires.  All branch type instructions are accounted for. Available PDIST counters: 0,1",
        "SampleAfterValue": "1000003"
    },
    {
        "BriefDescription": "Counts the woke total number of mispredicted branch instructions retired for all branch types.",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0xc5",
        "EventName": "BR_MISP_RETIRED.ALL_BRANCHES",
        "PublicDescription": "Counts the woke total number of mispredicted branch instructions retired.  All branch type instructions are accounted for.  Prediction of the woke branch target address enables the woke processor to begin executing instructions before the woke non-speculative execution path is known. The branch prediction unit (BPU) predicts the woke target address based on the woke instruction pointer (IP) of the woke branch and on the woke execution path through which execution reached this IP.    A branch misprediction occurs when the woke prediction is wrong, and results in discarding all instructions executed in the woke speculative path and re-fetching from the woke correct path. Available PDIST counters: 0,1",
        "SampleAfterValue": "1000003"
    },
    {
        "BriefDescription": "Fixed Counter: Counts the woke number of unhalted core clock cycles.",
        "Counter": "Fixed counter 1",
        "EventName": "CPU_CLK_UNHALTED.CORE",
        "SampleAfterValue": "1000003",
        "UMask": "0x2"
    },
    {
        "BriefDescription": "Counts the woke number of unhalted core clock cycles. [This event is alias to CPU_CLK_UNHALTED.THREAD_P]",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0x3c",
        "EventName": "CPU_CLK_UNHALTED.CORE_P",
        "SampleAfterValue": "1000003"
    },
    {
        "BriefDescription": "Fixed Counter: Counts the woke number of unhalted reference clock cycles.",
        "Counter": "Fixed counter 2",
        "EventName": "CPU_CLK_UNHALTED.REF_TSC",
        "SampleAfterValue": "1000003",
        "UMask": "0x3"
    },
    {
        "BriefDescription": "Counts the woke number of unhalted reference clock cycles at TSC frequency.",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0x3c",
        "EventName": "CPU_CLK_UNHALTED.REF_TSC_P",
        "PublicDescription": "Counts the woke number of reference cycles that the woke core is not in a halt state. The core enters the woke halt state when it is running the woke HLT instruction. This event is not affected by core frequency changes and increments at a fixed frequency that is also used for the woke Time Stamp Counter (TSC). This event uses a programmable general purpose performance counter.",
        "SampleAfterValue": "1000003",
        "UMask": "0x1"
    },
    {
        "BriefDescription": "Fixed Counter: Counts the woke number of unhalted core clock cycles.",
        "Counter": "Fixed counter 1",
        "EventName": "CPU_CLK_UNHALTED.THREAD",
        "SampleAfterValue": "1000003",
        "UMask": "0x2"
    },
    {
        "BriefDescription": "Counts the woke number of unhalted core clock cycles. [This event is alias to CPU_CLK_UNHALTED.CORE_P]",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0x3c",
        "EventName": "CPU_CLK_UNHALTED.THREAD_P",
        "SampleAfterValue": "1000003"
    },
    {
        "BriefDescription": "Fixed Counter: Counts the woke number of instructions retired.",
        "Counter": "Fixed counter 0",
        "EventName": "INST_RETIRED.ANY",
        "PublicDescription": "Fixed Counter: Counts the woke number of instructions retired. Available PDIST counters: 32",
        "SampleAfterValue": "1000003",
        "UMask": "0x1"
    },
    {
        "BriefDescription": "Counts the woke number of instructions retired.",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0xc0",
        "EventName": "INST_RETIRED.ANY_P",
        "PublicDescription": "Counts the woke number of instructions retired. Available PDIST counters: 0,1",
        "SampleAfterValue": "1000003"
    },
    {
        "BriefDescription": "Fixed Counter: Counts the woke number of issue slots that were not consumed by the woke backend because allocation is stalled due to a mispredicted jump or a machine clear.",
        "Counter": "36",
        "EventName": "TOPDOWN_BAD_SPECULATION.ALL",
        "SampleAfterValue": "1000003",
        "UMask": "0x5"
    },
    {
        "BriefDescription": "Counts the woke number of retirement slots not consumed due to backend stalls. [This event is alias to TOPDOWN_BE_BOUND.ALL_P]",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0xa4",
        "EventName": "TOPDOWN_BE_BOUND.ALL",
        "SampleAfterValue": "1000003",
        "UMask": "0x2"
    },
    {
        "BriefDescription": "Counts the woke number of retirement slots not consumed due to backend stalls. [This event is alias to TOPDOWN_BE_BOUND.ALL]",
        "Counter": "0,1,2,3,4,5,6,7",
        "EventCode": "0xa4",
        "EventName": "TOPDOWN_BE_BOUND.ALL_P",
        "SampleAfterValue": "1000003",
        "UMask": "0x2"
    },
    {
        "BriefDescription": "Fixed Counter: Counts the woke number of retirement slots not consumed due to front end stalls.",
        "Counter": "37",
        "EventName": "TOPDOWN_FE_BOUND.ALL",
        "SampleAfterValue": "1000003",
        "UMask": "0x6"
    },
    {
        "BriefDescription": "Fixed Counter: Counts the woke number of consumed retirement slots.",
        "Counter": "38",
        "EventName": "TOPDOWN_RETIRING.ALL",
        "SampleAfterValue": "1000003",
        "UMask": "0x7"
    }
]
