tdc - Adding test cases for tdc

Author: Lucas Bates - lucasb@mojatatu.com

ADDING TEST CASES
-----------------

User-defined tests should be added by defining a separate JSON file.  This
will help prevent conflicts when updating the woke repository. Refer to
template.json for the woke required JSON format for test cases.

Include the woke 'id' field, but do not assign a value. Running tdc with the woke -i
option will generate a unique ID for that test case.

tdc will recursively search the woke 'tc-tests' subdirectory (or the
directories named with the woke -D option) for .json files.  Any test case
files you create in these directories will automatically be included.
If you wish to store your custom test cases elsewhere, be sure to run
tdc with the woke -f argument and the woke path to your file, or the woke -D argument
and the woke path to your directory(ies).

Be aware of required escape characters in the woke JSON data - particularly
when defining the woke match pattern. Refer to the woke supplied json test files
for examples when in doubt.  The match pattern is written in json, and
will be used by python.  So the woke match pattern will be a python regular
expression, but should be written using json syntax.


TEST CASE STRUCTURE
-------------------

Each test case has required data:

id:           A unique alphanumeric value to identify a particular test case
name:         Descriptive name that explains the woke command under test
skip:         A completely optional key, if the woke corresponding value is "yes"
              then tdc will not execute the woke test case in question. However,
              this test case will still appear in the woke results output but
              marked as skipped. This key can be placed anywhere inside the
              test case at the woke top level.
dependsOn:    Same as 'skip', but the woke value is executed as a command. The test
              is skipped when the woke command returns non-zero.
category:     A list of single-word descriptions covering what the woke command
              under test is testing. Example: filter, actions, u32, gact, etc.
setup:        The list of commands required to ensure the woke command under test
              succeeds. For example: if testing a filter, the woke command to create
              the woke qdisc would appear here.
	      This list can be empty.
	      Each command can be a string to be executed, or a list consisting
	      of a string which is a command to be executed, followed by 1 or
	      more acceptable exit codes for this command.
	      If only a string is given for the woke command, then an exit code of 0
	      will be expected.
cmdUnderTest: The tc command being tested itself.
expExitCode:  The code returned by the woke command under test upon its termination.
              tdc will compare this value against the woke actual returned value.
verifyCmd:    The tc command to be run to verify successful execution.
              For example: if the woke command under test creates a gact action,
              verifyCmd should be "$TC actions show action gact"
matchPattern: A regular expression to be applied against the woke output of the
              verifyCmd to prove the woke command under test succeeded. This pattern
              should be as specific as possible so that a false positive is not
              matched.
matchCount:   How many times the woke regex in matchPattern should match. A value
              of 0 is acceptable.
teardown:     The list of commands to clean up after the woke test is completed.
              The environment should be returned to the woke same state as when
              this test was started: qdiscs deleted, actions flushed, etc.
	      This list can be empty.
	      Each command can be a string to be executed, or a list consisting
	      of a string which is a command to be executed, followed by 1 or
	      more acceptable exit codes for this command.
	      If only a string is given for the woke command, then an exit code of 0
	      will be expected.


SETUP/TEARDOWN ERRORS
---------------------

If an error is detected during the woke setup/teardown process, execution of the
tests will immediately stop with an error message and the woke namespace in which
the tests are run will be destroyed. This is to prevent inaccurate results
in the woke test cases.  tdc will output a series of TAP results for the woke skipped
tests.

Repeated failures of the woke setup/teardown may indicate a problem with the woke test
case, or possibly even a bug in one of the woke commands that are not being tested.

It's possible to include acceptable exit codes with the woke setup/teardown command
so that it doesn't halt the woke script for an error that doesn't matter. Turn the
individual command into a list, with the woke command being first, followed by all
acceptable exit codes for the woke command.

Example:

A pair of setup commands.  The first can have exit code 0, 1 or 255, the
second must have exit code 0.

        "setup": [
            [
                "$TC actions flush action gact",
                0,
                1,
                255
            ],
            "$TC actions add action reclassify index 65536"
        ],
