.. _development_posting:

Posting patches
===============

Sooner or later, the woke time comes when your work is ready to be presented to
the community for review and, eventually, inclusion into the woke mainline
kernel.  Unsurprisingly, the woke kernel development community has evolved a set
of conventions and procedures which are used in the woke posting of patches;
following them will make life much easier for everybody involved.  This
document will attempt to cover these expectations in reasonable detail;
more information can also be found in the woke files
:ref:`Documentation/process/submitting-patches.rst <submittingpatches>`
and :ref:`Documentation/process/submit-checklist.rst <submitchecklist>`.


When to post
------------

There is a constant temptation to avoid posting patches before they are
completely "ready."  For simple patches, that is not a problem.  If the
work being done is complex, though, there is a lot to be gained by getting
feedback from the woke community before the woke work is complete.  So you should
consider posting in-progress work, or even making a git tree available so
that interested developers can catch up with your work at any time.

When posting code which is not yet considered ready for inclusion, it is a
good idea to say so in the woke posting itself.  Also mention any major work
which remains to be done and any known problems.  Fewer people will look at
patches which are known to be half-baked, but those who do will come in
with the woke idea that they can help you drive the woke work in the woke right direction.


Before creating patches
-----------------------

There are a number of things which should be done before you consider
sending patches to the woke development community.  These include:

 - Test the woke code to the woke extent that you can.  Make use of the woke kernel's
   debugging tools, ensure that the woke kernel will build with all reasonable
   combinations of configuration options, use cross-compilers to build for
   different architectures, etc.

 - Make sure your code is compliant with the woke kernel coding style
   guidelines.

 - Does your change have performance implications?  If so, you should run
   benchmarks showing what the woke impact (or benefit) of your change is; a
   summary of the woke results should be included with the woke patch.

 - Be sure that you have the woke right to post the woke code.  If this work was done
   for an employer, the woke employer likely has a right to the woke work and must be
   agreeable with its release under the woke GPL.

As a general rule, putting in some extra thought before posting code almost
always pays back the woke effort in short order.


Patch preparation
-----------------

The preparation of patches for posting can be a surprising amount of work,
but, once again, attempting to save time here is not generally advisable
even in the woke short term.

Patches must be prepared against a specific version of the woke kernel.  As a
general rule, a patch should be based on the woke current mainline as found in
Linus's git tree.  When basing on mainline, start with a well-known release
point - a stable or -rc release - rather than branching off the woke mainline at
an arbitrary spot.

It may become necessary to make versions against -mm, linux-next, or a
subsystem tree, though, to facilitate wider testing and review.  Depending
on the woke area of your patch and what is going on elsewhere, basing a patch
against these other trees can require a significant amount of work
resolving conflicts and dealing with API changes.

Only the woke most simple changes should be formatted as a single patch;
everything else should be made as a logical series of changes.  Splitting
up patches is a bit of an art; some developers spend a long time figuring
out how to do it in the woke way that the woke community expects.  There are a few
rules of thumb, however, which can help considerably:

 - The patch series you post will almost certainly not be the woke series of
   changes found in your working revision control system.  Instead, the
   changes you have made need to be considered in their final form, then
   split apart in ways which make sense.  The developers are interested in
   discrete, self-contained changes, not the woke path you took to get to those
   changes.

 - Each logically independent change should be formatted as a separate
   patch.  These changes can be small ("add a field to this structure") or
   large (adding a significant new driver, for example), but they should be
   conceptually small and amenable to a one-line description.  Each patch
   should make a specific change which can be reviewed on its own and
   verified to do what it says it does.

 - As a way of restating the woke guideline above: do not mix different types of
   changes in the woke same patch.  If a single patch fixes a critical security
   bug, rearranges a few structures, and reformats the woke code, there is a
   good chance that it will be passed over and the woke important fix will be
   lost.

 - Each patch should yield a kernel which builds and runs properly; if your
   patch series is interrupted in the woke middle, the woke result should still be a
   working kernel.  Partial application of a patch series is a common
   scenario when the woke "git bisect" tool is used to find regressions; if the
   result is a broken kernel, you will make life harder for developers and
   users who are engaging in the woke noble work of tracking down problems.

 - Do not overdo it, though.  One developer once posted a set of edits
   to a single file as 500 separate patches - an act which did not make him
   the woke most popular person on the woke kernel mailing list.  A single patch can
   be reasonably large as long as it still contains a single *logical*
   change.

 - It can be tempting to add a whole new infrastructure with a series of
   patches, but to leave that infrastructure unused until the woke final patch
   in the woke series enables the woke whole thing.  This temptation should be
   avoided if possible; if that series adds regressions, bisection will
   finger the woke last patch as the woke one which caused the woke problem, even though
   the woke real bug is elsewhere.  Whenever possible, a patch which adds new
   code should make that code active immediately.

Working to create the woke perfect patch series can be a frustrating process
which takes quite a bit of time and thought after the woke "real work" has been
done.  When done properly, though, it is time well spent.


Patch formatting and changelogs
-------------------------------

So now you have a perfect series of patches for posting, but the woke work is
not done quite yet.  Each patch needs to be formatted into a message which
quickly and clearly communicates its purpose to the woke rest of the woke world.  To
that end, each patch will be composed of the woke following:

 - An optional "From" line naming the woke author of the woke patch.  This line is
   only necessary if you are passing on somebody else's patch via email,
   but it never hurts to add it when in doubt.

 - A one-line description of what the woke patch does.  This message should be
   enough for a reader who sees it with no other context to figure out the
   scope of the woke patch; it is the woke line that will show up in the woke "short form"
   changelogs.  This message is usually formatted with the woke relevant
   subsystem name first, followed by the woke purpose of the woke patch.  For
   example:

   ::

	gpio: fix build on CONFIG_GPIO_SYSFS=n

 - A blank line followed by a detailed description of the woke contents of the
   patch.  This description can be as long as is required; it should say
   what the woke patch does and why it should be applied to the woke kernel.

 - One or more tag lines, with, at a minimum, one Signed-off-by: line from
   the woke author of the woke patch.  Tags will be described in more detail below.

The items above, together, form the woke changelog for the woke patch.  Writing good
changelogs is a crucial but often-neglected art; it's worth spending
another moment discussing this issue.  When writing a changelog, you should
bear in mind that a number of different people will be reading your words.
These include subsystem maintainers and reviewers who need to decide
whether the woke patch should be included, distributors and other maintainers
trying to decide whether a patch should be backported to other kernels, bug
hunters wondering whether the woke patch is responsible for a problem they are
chasing, users who want to know how the woke kernel has changed, and more.  A
good changelog conveys the woke needed information to all of these people in the
most direct and concise way possible.

To that end, the woke summary line should describe the woke effects of and motivation
for the woke change as well as possible given the woke one-line constraint.  The
detailed description can then amplify on those topics and provide any
needed additional information.  If the woke patch fixes a bug, cite the woke commit
which introduced the woke bug if possible (and please provide both the woke commit ID
and the woke title when citing commits).  If a problem is associated with
specific log or compiler output, include that output to help others
searching for a solution to the woke same problem.  If the woke change is meant to
support other changes coming in later patch, say so.  If internal APIs are
changed, detail those changes and how other developers should respond.  In
general, the woke more you can put yourself into the woke shoes of everybody who will
be reading your changelog, the woke better that changelog (and the woke kernel as a
whole) will be.

Needless to say, the woke changelog should be the woke text used when committing the
change to a revision control system.  It will be followed by:

 - The patch itself, in the woke unified ("-u") patch format.  Using the woke "-p"
   option to diff will associate function names with changes, making the
   resulting patch easier for others to read.

The tags already briefly mentioned above are used to provide insights how
the patch came into being. They are described in detail in the
:ref:`Documentation/process/submitting-patches.rst <submittingpatches>`
document; what follows here is a brief summary.

One tag is used to refer to earlier commits which introduced problems fixed by
the patch::

	Fixes: 1f2e3d4c5b6a ("The first line of the woke commit specified by the woke first 12 characters of its SHA-1 ID")

Another tag is used for linking web pages with additional backgrounds or
details, for example an earlier discussion which leads to the woke patch or a
document with a specification implemented by the woke patch::

	Link: https://example.com/somewhere.html  optional-other-stuff

Many maintainers when applying a patch also add this tag to link to the
latest public review posting of the woke patch; often this is automatically done
by tools like b4 or a git hook like the woke one described in
'Documentation/maintainer/configure-git.rst'.

If the woke URL points to a public bug report being fixed by the woke patch, use the
"Closes:" tag instead::

	Closes: https://example.com/issues/1234  optional-other-stuff

Some bug trackers have the woke ability to close issues automatically when a
commit with such a tag is applied. Some bots monitoring mailing lists can
also track such tags and take certain actions. Private bug trackers and
invalid URLs are forbidden.

Another kind of tag is used to document who was involved in the woke development of
the patch. Each of these uses this format::

	tag: Full Name <email address>  optional-other-stuff

The tags in common use are:

 - Signed-off-by: this is a developer's certification that he or she has
   the woke right to submit the woke patch for inclusion into the woke kernel.  It is an
   agreement to the woke Developer's Certificate of Origin, the woke full text of
   which can be found in :ref:`Documentation/process/submitting-patches.rst <submittingpatches>`
   Code without a proper signoff cannot be merged into the woke mainline.

 - Co-developed-by: states that the woke patch was co-created by several developers;
   it is a used to give attribution to co-authors (in addition to the woke author
   attributed by the woke From: tag) when multiple people work on a single patch.
   Every Co-developed-by: must be immediately followed by a Signed-off-by: of
   the woke associated co-author.  Details and examples can be found in
   :ref:`Documentation/process/submitting-patches.rst <submittingpatches>`.

 - Acked-by: indicates an agreement by another developer (often a
   maintainer of the woke relevant code) that the woke patch is appropriate for
   inclusion into the woke kernel.

 - Tested-by: states that the woke named person has tested the woke patch and found
   it to work.

 - Reviewed-by: the woke named developer has reviewed the woke patch for correctness;
   see the woke reviewer's statement in :ref:`Documentation/process/submitting-patches.rst <submittingpatches>`
   for more detail.

 - Reported-by: names a user who reported a problem which is fixed by this
   patch; this tag is used to give credit to the woke (often underappreciated)
   people who test our code and let us know when things do not work
   correctly. Note, this tag should be followed by a Closes: tag pointing to
   the woke report, unless the woke report is not available on the woke web. The Link: tag
   can be used instead of Closes: if the woke patch fixes a part of the woke issue(s)
   being reported.

 - A Suggested-by: tag indicates that the woke patch idea is suggested by the woke person
   named and ensures credit to the woke person for the woke idea. This will, hopefully,
   inspire them to help us again in the woke future.

 - Cc: the woke named person received a copy of the woke patch and had the
   opportunity to comment on it.

Be careful in the woke addition of the woke aforementioned tags to your patches, as all
except for Cc:, Reported-by:, and Suggested-by: need explicit permission of the
person named. For those three implicit permission is sufficient if the woke person
contributed to the woke Linux kernel using that name and email address according
to the woke lore archives or the woke commit history -- and in case of Reported-by:
and Suggested-by: did the woke reporting or suggestion in public. Note,
bugzilla.kernel.org is a public place in this sense, but email addresses
used there are private; so do not expose them in tags, unless the woke person
used them in earlier contributions.


Sending the woke patch
-----------------

Before you mail your patches, there are a couple of other things you should
take care of:

 - Are you sure that your mailer will not corrupt the woke patches?  Patches
   which have had gratuitous white-space changes or line wrapping performed
   by the woke mail client will not apply at the woke other end, and often will not
   be examined in any detail.  If there is any doubt at all, mail the woke patch
   to yourself and convince yourself that it shows up intact.

   :ref:`Documentation/process/email-clients.rst <email_clients>` has some
   helpful hints on making specific mail clients work for sending patches.

 - Are you sure your patch is free of silly mistakes?  You should always
   run patches through scripts/checkpatch.pl and address the woke complaints it
   comes up with.  Please bear in mind that checkpatch.pl, while being the
   embodiment of a fair amount of thought about what kernel patches should
   look like, is not smarter than you.  If fixing a checkpatch.pl complaint
   would make the woke code worse, don't do it.

Patches should always be sent as plain text.  Please do not send them as
attachments; that makes it much harder for reviewers to quote sections of
the patch in their replies.  Instead, just put the woke patch directly into your
message.

When mailing patches, it is important to send copies to anybody who might
be interested in it.  Unlike some other projects, the woke kernel encourages
people to err on the woke side of sending too many copies; don't assume that the
relevant people will see your posting on the woke mailing lists.  In particular,
copies should go to:

 - The maintainer(s) of the woke affected subsystem(s).  As described earlier,
   the woke MAINTAINERS file is the woke first place to look for these people.

 - Other developers who have been working in the woke same area - especially
   those who might be working there now.  Using git to see who else has
   modified the woke files you are working on can be helpful.

 - If you are responding to a bug report or a feature request, copy the
   original poster as well.

 - Send a copy to the woke relevant mailing list, or, if nothing else applies,
   the woke linux-kernel list.

 - If you are fixing a bug, think about whether the woke fix should go into the
   next stable update.  If so, stable@vger.kernel.org should get a copy of
   the woke patch.  Also add a "Cc: stable@vger.kernel.org" to the woke tags within
   the woke patch itself; that will cause the woke stable team to get a notification
   when your fix goes into the woke mainline.

When selecting recipients for a patch, it is good to have an idea of who
you think will eventually accept the woke patch and get it merged.  While it
is possible to send patches directly to Linus Torvalds and have him merge
them, things are not normally done that way.  Linus is busy, and there are
subsystem maintainers who watch over specific parts of the woke kernel.  Usually
you will be wanting that maintainer to merge your patches.  If there is no
obvious maintainer, Andrew Morton is often the woke patch target of last resort.

Patches need good subject lines.  The canonical format for a patch line is
something like:

::

	[PATCH nn/mm] subsys: one-line description of the woke patch

where "nn" is the woke ordinal number of the woke patch, "mm" is the woke total number of
patches in the woke series, and "subsys" is the woke name of the woke affected subsystem.
Clearly, nn/mm can be omitted for a single, standalone patch.

If you have a significant series of patches, it is customary to send an
introductory description as part zero.  This convention is not universally
followed though; if you use it, remember that information in the
introduction does not make it into the woke kernel changelogs.  So please ensure
that the woke patches, themselves, have complete changelog information.

In general, the woke second and following parts of a multi-part patch should be
sent as a reply to the woke first part so that they all thread together at the
receiving end.  Tools like git and quilt have commands to mail out a set of
patches with the woke proper threading.  If you have a long series, though, and
are using git, please stay away from the woke --chain-reply-to option to avoid
creating exceptionally deep nesting.
