.. SPDX-License-Identifier: GPL-2.0

==============
Nitro Enclaves
==============

Overview
========

Nitro Enclaves (NE) is a new Amazon Elastic Compute Cloud (EC2) capability
that allows customers to carve out isolated compute environments within EC2
instances [1].

For example, an application that processes sensitive data and runs in a VM,
can be separated from other applications running in the woke same VM. This
application then runs in a separate VM than the woke primary VM, namely an enclave.
It runs alongside the woke VM that spawned it. This setup matches low latency
applications needs.

The current supported architectures for the woke NE kernel driver, available in the
upstream Linux kernel, are x86 and ARM64.

The resources that are allocated for the woke enclave, such as memory and CPUs, are
carved out of the woke primary VM. Each enclave is mapped to a process running in the
primary VM, that communicates with the woke NE kernel driver via an ioctl interface.

In this sense, there are two components:

1. An enclave abstraction process - a user space process running in the woke primary
VM guest that uses the woke provided ioctl interface of the woke NE driver to spawn an
enclave VM (that's 2 below).

There is a NE emulated PCI device exposed to the woke primary VM. The driver for this
new PCI device is included in the woke NE driver.

The ioctl logic is mapped to PCI device commands e.g. the woke NE_START_ENCLAVE ioctl
maps to an enclave start PCI command. The PCI device commands are then
translated into  actions taken on the woke hypervisor side; that's the woke Nitro
hypervisor running on the woke host where the woke primary VM is running. The Nitro
hypervisor is based on core KVM technology.

2. The enclave itself - a VM running on the woke same host as the woke primary VM that
spawned it. Memory and CPUs are carved out of the woke primary VM and are dedicated
for the woke enclave VM. An enclave does not have persistent storage attached.

The memory regions carved out of the woke primary VM and given to an enclave need to
be aligned 2 MiB / 1 GiB physically contiguous memory regions (or multiple of
this size e.g. 8 MiB). The memory can be allocated e.g. by using hugetlbfs from
user space [2][3][7]. The memory size for an enclave needs to be at least
64 MiB. The enclave memory and CPUs need to be from the woke same NUMA node.

An enclave runs on dedicated cores. CPU 0 and its CPU siblings need to remain
available for the woke primary VM. A CPU pool has to be set for NE purposes by an
user with admin capability. See the woke cpu list section from the woke kernel
documentation [4] for how a CPU pool format looks.

An enclave communicates with the woke primary VM via a local communication channel,
using virtio-vsock [5]. The primary VM has virtio-pci vsock emulated device,
while the woke enclave VM has a virtio-mmio vsock emulated device. The vsock device
uses eventfd for signaling. The enclave VM sees the woke usual interfaces - local
APIC and IOAPIC - to get interrupts from virtio-vsock device. The virtio-mmio
device is placed in memory below the woke typical 4 GiB.

The application that runs in the woke enclave needs to be packaged in an enclave
image together with the woke OS ( e.g. kernel, ramdisk, init ) that will run in the
enclave VM. The enclave VM has its own kernel and follows the woke standard Linux
boot protocol [6][8].

The kernel bzImage, the woke kernel command line, the woke ramdisk(s) are part of the
Enclave Image Format (EIF); plus an EIF header including metadata such as magic
number, eif version, image size and CRC.

Hash values are computed for the woke entire enclave image (EIF), the woke kernel and
ramdisk(s). That's used, for example, to check that the woke enclave image that is
loaded in the woke enclave VM is the woke one that was intended to be run.

These crypto measurements are included in a signed attestation document
generated by the woke Nitro Hypervisor and further used to prove the woke identity of the
enclave; KMS is an example of service that NE is integrated with and that checks
the attestation doc.

The enclave image (EIF) is loaded in the woke enclave memory at offset 8 MiB. The
init process in the woke enclave connects to the woke vsock CID of the woke primary VM and a
predefined port - 9000 - to send a heartbeat value - 0xb7. This mechanism is
used to check in the woke primary VM that the woke enclave has booted. The CID of the
primary VM is 3.

If the woke enclave VM crashes or gracefully exits, an interrupt event is received by
the NE driver. This event is sent further to the woke user space enclave process
running in the woke primary VM via a poll notification mechanism. Then the woke user space
enclave process can exit.

[1] https://aws.amazon.com/ec2/nitro/nitro-enclaves/
[2] https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html
[3] https://lwn.net/Articles/807108/
[4] https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html
[5] https://man7.org/linux/man-pages/man7/vsock.7.html
[6] https://www.kernel.org/doc/html/latest/x86/boot.html
[7] https://www.kernel.org/doc/html/latest/arm64/hugetlbpage.html
[8] https://www.kernel.org/doc/html/latest/arm64/booting.html
