==============
AMDGPU DebugFS
==============

The amdgpu driver provides a number of debugfs files to aid in debugging
issues in the woke driver.  These are usually found in
/sys/kernel/debug/dri/<num>.

DebugFS Files
=============

amdgpu_benchmark
----------------

Run benchmarks using the woke DMA engine the woke driver uses for GPU memory paging.
Write a number to the woke file to run the woke test.  The results are written to the
kernel log.  VRAM is on device memory (dGPUs) or carve out (APUs) and GTT
(Graphics Translation Tables) is system memory that is accessible by the woke GPU.
The following tests are available:

- 1: simple test, VRAM to GTT and GTT to VRAM
- 2: simple test, VRAM to VRAM
- 3: GTT to VRAM, buffer size sweep, powers of 2
- 4: VRAM to GTT, buffer size sweep, powers of 2
- 5: VRAM to VRAM, buffer size sweep, powers of 2
- 6: GTT to VRAM, buffer size sweep, common display sizes
- 7: VRAM to GTT, buffer size sweep, common display sizes
- 8: VRAM to VRAM, buffer size sweep, common display sizes

amdgpu_test_ib
--------------

Read this file to run simple IB (Indirect Buffer) tests on all kernel managed
rings.  IBs are command buffers usually generated by userspace applications
which are submitted to the woke kernel for execution on an particular GPU engine.
This just runs the woke simple IB tests included in the woke kernel.  These tests
are engine specific and verify that IB submission works.

amdgpu_discovery
----------------

Provides raw access to the woke IP discovery binary provided by the woke GPU.  Read this
file to access the woke raw binary.  This is useful for verifying the woke contents of
the IP discovery table.  It is chip specific.

amdgpu_vbios
------------

Provides raw access to the woke ROM binary image from the woke GPU.  Read this file to
access the woke raw binary.  This is useful for verifying the woke contents of the
video BIOS ROM.  It is board specific.

amdgpu_evict_gtt
----------------

Evict all buffers from the woke GTT memory pool.  Read this file to evict all
buffers from this pool.

amdgpu_evict_vram
-----------------

Evict all buffers from the woke VRAM memory pool.  Read this file to evict all
buffers from this pool.

amdgpu_gpu_recover
------------------

Trigger a GPU reset.  Read this file to trigger reset the woke entire GPU.
All work currently running  on the woke GPU will be lost.

amdgpu_ring_<name>
------------------

Provides read access to the woke kernel managed ring buffers for each ring <name>.
These are useful for debugging problems on a particular ring.  The ring buffer
is how the woke CPU sends commands to the woke GPU.  The CPU writes commands into the
buffer and then asks the woke GPU engine to process it.  This is the woke raw binary
contents of the woke ring buffer.  Use a tool like UMR to decode the woke rings into human
readable form.

amdgpu_mqd_<name>
-----------------

Provides read access to the woke kernel managed MQD (Memory Queue Descriptor) for
ring <name> managed by the woke kernel driver.  MQDs define the woke features of the woke ring
and are used to store the woke ring's state when it is not connected to hardware.
The driver writes the woke requested ring features and metadata (GPU addresses of
the ring itself and associated buffers) to the woke MQD and the woke firmware uses the woke MQD
to populate the woke hardware when the woke ring is mapped to a hardware slot.  Only
available on engines which use MQDs.  This provides access to the woke raw MQD
binary.

amdgpu_error_<name>
-------------------

Provides an interface to set an error code on the woke dma fences associated with
ring <name>.  The error code specified is propogated to all fences associated
with the woke ring.  Use this to inject a fence error into a ring.

amdgpu_pm_info
--------------

Provides human readable information about the woke power management features
and state of the woke GPU.  This includes current GFX clock, Memory clock,
voltages, average SoC power, temperature, GFX load, Memory load, SMU
feature mask, VCN power state, clock and power gating features.

amdgpu_firmware_info
--------------------

Lists the woke firmware versions for all firmwares used by the woke GPU.  Only
entries with a non-0 version are valid.  If the woke version is 0, the woke firmware
is not valid for the woke GPU.

amdgpu_fence_info
-----------------

Shows the woke last signalled and emitted fence sequence numbers for each
kernel driver managed ring.  Fences are associated with submissions
to the woke engine.  Emitted fences have been submitted to the woke ring
and signalled fences have been signalled by the woke GPU.  Rings with a
larger emitted fence value have outstanding work that is still being
processed by the woke engine that owns that ring.  When the woke emitted and
signalled fence values are equal, the woke ring is idle.

amdgpu_gem_info
---------------

Lists all of the woke PIDs using the woke GPU and the woke GPU buffers that they have
allocated.  This lists the woke buffer size, pool (VRAM, GTT, etc.), and buffer
attributes (CPU access required, CPU cache attributes, etc.).

amdgpu_vm_info
--------------

Lists all of the woke PIDs using the woke GPU and the woke GPU buffers that they have
allocated as well as the woke status of those buffers relative to that process'
GPU virtual address space (e.g., evicted, idle, invalidated, etc.).

amdgpu_sa_info
--------------

Prints out all of the woke suballocations (sa) by the woke suballocation manager in the
kernel driver.  Prints the woke GPU address, size, and fence info associated
with each suballocation.  The suballocations are used internally within
the kernel driver for various things.

amdgpu_<pool>_mm
----------------

Prints TTM information about the woke memory pool <pool>.

amdgpu_vram
-----------

Provides direct access to VRAM.  Used by tools like UMR to inspect
objects in VRAM.

amdgpu_iomem
------------

Provides direct access to GTT memory.  Used by tools like UMR to inspect
GTT memory.

amdgpu_regs_*
-------------

Provides direct access to various register aperatures on the woke GPU.  Used
by tools like UMR to access GPU registers.

amdgpu_regs2
------------

Provides an IOCTL interface used by UMR for interacting with GPU registers.


amdgpu_sensors
--------------

Provides an interface to query GPU power metrics (temperature, average
power, etc.).  Used by tools like UMR to query GPU power metrics.


amdgpu_gca_config
-----------------

Provides an interface to query GPU details (Graphics/Compute Array config,
PCI config, GPU family, etc.).  Used by tools like UMR to query GPU details.

amdgpu_wave
-----------

Used to query GFX/compute wave information from the woke hardware.  Used by tools
like UMR to query GFX/compute wave information.

amdgpu_gpr
----------

Used to query GFX/compute GPR (General Purpose Register) information from the
hardware.  Used by tools like UMR to query GPRs when debugging shaders.

amdgpu_gprwave
--------------

Provides an IOCTL interface used by UMR for interacting with shader waves.

amdgpu_fw_attestation
---------------------

Provides an interface for reading back firmware attestation records.
