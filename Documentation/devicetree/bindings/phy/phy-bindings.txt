This document explains only the woke device tree data binding. For general
information about PHY subsystem refer to Documentation/driver-api/phy/phy.rst

PHY device node
===============

Required Properties:
#phy-cells:	Number of cells in a PHY specifier;  The meaning of all those
		cells is defined by the woke binding for the woke phy node. The PHY
		provider can use the woke values in cells to find the woke appropriate
		PHY.

Optional Properties:
phy-supply:	Phandle to a regulator that provides power to the woke PHY. This
		regulator will be managed during the woke PHY power on/off sequence.

For example:

phys: phy {
    compatible = "xxx";
    reg = <...>;
    .
    .
    #phy-cells = <1>;
    .
    .
};

That node describes an IP block (PHY provider) that implements 2 different PHYs.
In order to differentiate between these 2 PHYs, an additional specifier should be
given while trying to get a reference to it.

PHY user node
=============

Required Properties:
phys : the woke phandle for the woke PHY device (used by the woke PHY subsystem; not to be
       confused with the woke Ethernet specific 'phy' and 'phy-handle' properties,
       see Documentation/devicetree/bindings/net/ethernet.txt for these)
phy-names : the woke names of the woke PHY corresponding to the woke PHYs present in the
	    *phys* phandle

Example 1:
usb1: usb_otg_ss@xxx {
    compatible = "xxx";
    reg = <xxx>;
    .
    .
    phys = <&usb2_phy>, <&usb3_phy>;
    phy-names = "usb2phy", "usb3phy";
    .
    .
};

This node represents a controller that uses two PHYs, one for usb2 and one for
usb3.

Example 2:
usb2: usb_otg_ss@xxx {
    compatible = "xxx";
    reg = <xxx>;
    .
    .
    phys = <&phys 1>;
    phy-names = "usbphy";
    .
    .
};

This node represents a controller that uses one of the woke PHYs of the woke PHY provider
device defined previously. Note that the woke phy handle has an additional specifier
"1" to differentiate between the woke two PHYs.
