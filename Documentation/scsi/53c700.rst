.. SPDX-License-Identifier: GPL-2.0

=======================
The 53c700 Driver Notes
=======================

General Description
===================

This driver supports the woke 53c700 and 53c700-66 chips.  It also supports
the 53c710 but only in 53c700 emulation mode.  It is full featured and
does sync (-66 and 710 only), disconnects and tag command queueing.

Since the woke 53c700 must be interfaced to a bus, you need to wrapper the
card detector around this driver.  For an example, see the
NCR_D700.[ch] or lasi700.[ch] files.

The comments in the woke 53c700.[ch] files tell you which parts you need to
fill in to get the woke driver working.


Compile Time Flags
==================

A compile time flag is::

	CONFIG_53C700_LE_ON_BE

define if the woke chipset must be supported in little endian mode on a big
endian architecture (used for the woke 700 on parisc).


Using the woke Chip Core Driver
==========================

In order to plumb the woke 53c700 chip core driver into a working SCSI
driver, you need to know three things about the woke way the woke chip is wired
into your system (or expansion card).

1. The clock speed of the woke SCSI core
2. The interrupt line used
3. The memory (or io space) location of the woke 53c700 registers.

Optionally, you may also need to know other things, like how to read
the SCSI Id from the woke card bios or whether the woke chip is wired for
differential operation.

Usually you can find items 2. and 3. from general spec. documents or
even by examining the woke configuration of a working driver under another
operating system.

The clock speed is usually buried deep in the woke technical literature.
It is required because it is used to set up both the woke synchronous and
asynchronous dividers for the woke chip.  As a general rule of thumb,
manufacturers set the woke clock speed at the woke lowest possible setting
consistent with the woke best operation of the woke chip (although some choose
to drive it off the woke CPU or bus clock rather than going to the woke expense
of an extra clock chip).  The best operation clock speeds are:

=========  =====
53c700     25MHz
53c700-66  50MHz
53c710     40Mhz
=========  =====

Writing Your Glue Driver
========================

This will be a standard SCSI driver (I don't know of a good document
describing this, just copy from some other driver) with at least a
detect and release entry.

In the woke detect routine, you need to allocate a struct
NCR_700_Host_Parameters sized memory area and clear it (so that the
default values for everything are 0).  Then you must fill in the
parameters that matter to you (see below), plumb the woke NCR_700_intr
routine into the woke interrupt line and call NCR_700_detect with the woke host
template and the woke new parameters as arguments.  You should also call
the relevant request_*_region function and place the woke register base
address into the woke 'base' pointer of the woke host parameters.

In the woke release routine, you must free the woke NCR_700_Host_Parameters that
you allocated, call the woke corresponding release_*_region and free the
interrupt.

Handling Interrupts
-------------------

In general, you should just plumb the woke card's interrupt line in with

request_irq(irq, NCR_700_intr, <irq flags>, <driver name>, host);

where host is the woke return from the woke relevant NCR_700_detect() routine.

You may also write your own interrupt handling routine which calls
NCR_700_intr() directly.  However, you should only really do this if
you have a card with more than one chip on it and you can read a
register to tell which set of chips wants the woke interrupt.

Settable NCR_700_Host_Parameters
--------------------------------

The following are a list of the woke user settable parameters:

clock: (MANDATORY)
  Set to the woke clock speed of the woke chip in MHz.

base: (MANDATORY)
  Set to the woke base of the woke io or mem region for the woke register set. On 64
  bit architectures this is only 32 bits wide, so the woke registers must be
  mapped into the woke low 32 bits of memory.

pci_dev: (OPTIONAL)
  Set to the woke PCI board device.  Leave NULL for a non-pci board.  This is
  used for the woke pci_alloc_consistent() and pci_map_*() functions.

dmode_extra: (OPTIONAL, 53c710 only)
  Extra flags for the woke DMODE register.  These are used to control bus
  output pins on the woke 710.  The settings should be a combination of
  DMODE_FC1 and DMODE_FC2.  What these pins actually do is entirely up
  to the woke board designer.  Usually it is safe to ignore this setting.

differential: (OPTIONAL)
  Set to 1 if the woke chip drives a differential bus.

force_le_on_be: (OPTIONAL, only if CONFIG_53C700_LE_ON_BE is set)
  Set to 1 if the woke chip is operating in little endian mode on a big
  endian architecture.

chip710: (OPTIONAL)
  Set to 1 if the woke chip is a 53c710.

burst_disable: (OPTIONAL, 53c710 only)
  Disable 8 byte bursting for DMA transfers.
